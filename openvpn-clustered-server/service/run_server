#!/bin/bash

mkdir -p /data && cd /data

# Generate keys if they don't exist yet
if [[ ! -d "/data/pki" ]]; then
  /usr/share/easy-rsa/easyrsa --batch init-pki
  /usr/share/easy-rsa/easyrsa --req-cn=openvpn-server --batch build-ca nopass
  /usr/share/easy-rsa/easyrsa --keysize=${VPN_KEYSIZE:-2048} --batch gen-dh

  openvpn --genkey --secret /data/pki/ta.key

  /usr/share/easy-rsa/easyrsa --batch build-server-full "openvpn-server" nopass
  /usr/share/easy-rsa/easyrsa --batch gen-crl
fi

# Build the server configuration if it doesn't exist yet
if [[ ! -f "/data/server.conf" ]]; then
  /service/build_config server
fi

# if there is a rules.sh script in the data folder then execute it
# this is useful to set up the correct iptables, especially as those are lost once the container restarts
if [[ -f "/data/rules.sh" ]]; then
  /bin/sh /data/rules.sh
fi

# ensure the ccd directory exists, the client specific rules will also be stored in there
mkdir -p /data/ccd

# ----------------

# Start OpenVPN server
#---------------------
openvpn --config /data/server.conf --client-config-dir /data/ccd & # don't use --daemon or it won't be picked up with jobs
pid1=$!
status=$?
if [ $status -ne 0 ]; then
  echo "Failed to start OpenVPN Server: $status"
  exit $status
fi

# Start worker API endpoint
#--------------------------
/config/run-worker-endpoint.sh &
pid2=$!
status=$?
if [ $status -ne 0 ]; then
  echo "Failed to start Worker API endpoint: $status"
  exit $status
fi

# Start etcd worker watcher
#--------------------------
/config/run-etcd-worker-watcher.sh &
pid3=$!
status=$?
if [ $status -ne 0 ]; then
  echo "Failed to start ETCD worker watcher: $status"
  exit $status
fi

# Start periodic full worker sync
#--------------------------------
/config/run-periodic-full-worker-sync.sh &
pid4=$!
status=$?
if [ $status -ne 0 ]; then
  echo "Failed to start periodic full worker sync: $status"
  exit $status
fi


# Start etcd pki watcher
#--------------------------
/config/run-etcd-pki-watcher.sh &
pid5=$!
status=$?
if [ $status -ne 0 ]; then
  echo "Failed to start ETCD pki watcher: $status"
  exit $status
fi

# Start periodic pki sync
#--------------------------------
/config/run-periodic-sync-pki.sh &
pid6=$!
status=$?
if [ $status -ne 0 ]; then
  echo "Failed to start periodic pki sync: $status"
  exit $status
fi



while sleep 10; do
  exists1=$(jobs -p | grep -q -e "^${pid1}$"; echo $?)
  if [[ "${exists1}" -ne 0 ]]; then
    echo "OpenVPN server exited."
    exit 1
  fi

  exists2=$(jobs -p | grep -q -e "^${pid2}$"; echo $?)
  if [[ "${exists2}" -ne 0 ]]; then
    echo "Worker API endpoint exited." 1>&2
    exit 1
  fi

  exists3=$(jobs -p | grep -q -e "^${pid3}$"; echo $?)
  if [[ "${exists3}" -ne 0 ]]; then
    echo "ETCD worker watcher exited." 1>&2
    exit 1
  fi

  exists4=$(jobs -p | grep -q -e "^${pid4}$"; echo $?)
  if [[ "${exists4}" -ne 0 ]]; then
    echo "Periodic full worker route update exited." 1>&2
    exit 1
  fi

  exists5=$(jobs -p | grep -q -e "^${pid5}$"; echo $?)
  if [[ "${exists5}" -ne 0 ]]; then
    echo "ETCD pki watcher existed." 1>&2
    exit 1
  fi

  exists6=$(jobs -p | grep -q -e "^${pid6}$"; echo $?)
  if [[ "${exists6}" -ne 0 ]]; then
    echo "Periodic sync pki exited." 1>&2
    exit 1
  fi

done






